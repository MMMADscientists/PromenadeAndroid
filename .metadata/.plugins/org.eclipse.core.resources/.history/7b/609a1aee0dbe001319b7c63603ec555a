package com.promenadevt;

import java.net.URL;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
 
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import com.promenadevt.library.Constants;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.promenadevt.android.R;
import com.promenadevt.library.DatabaseHandler;
import com.promenadevt.library.UserFunctions;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.util.StringUtils;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.ResponseHeaderOverrides;
import com.amazonaws.services.s3.model.S3ObjectSummary;

public class EditActivity extends Activity 
{
    private static final String MY_PICTURE_BUCKET = "promenadeVTPics";
	EditText inputName;
	Button btnChangeName;
	Button btnTakePhoto;
	Button btnAddConnection;
	Button btnViewRoom;
	Button btnDelete;
	ImageView roomImage;
	
	 private static String KEY_IDPROPERTY = "idProperty";
	 
	 //private final String MY_ACCESS_KEY_ID = "AKIAI77Q7DPQCAT7OPJA";
	 //private final String MY_SECRET_KEY = "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";

	private static String username;
	private static String roomName;
	private static String dbID;
	private static String propID;
	private static String addr;
	private static String roomURL;
	
	int CAMERA_PIC_REQUEST = 1337; 
	
	private AmazonS3Client s3Client = new AmazonS3Client(
			new BasicAWSCredentials(Constants.ACCESS_KEY_ID,
					Constants.SECRET_KEY));
	
	private void getPano(){
		Intent takePanoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		startActivityForResult(takePanoIntent,CAMERA_PIC_REQUEST);
		
		/*Intent res = new Intent();
	    String mPackage = "com.google.android.gallery3d";
	    String mClass = "com.google.android.apps.lightcycle.ProtectedPanoramaCaptureActivity";

	    res.setComponent(new ComponentName(mPackage,mClass));
	    startActivityForResult(res,CAMERA_PIC_REQUEST);*/
		
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data){
		if( requestCode == CAMERA_PIC_REQUEST){
			Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
			roomImage.setImageBitmap(thumbnail);
		}
		super.onActivityResult(requestCode, resultCode, data);
		
		//AmazonS3Client s3Client = new AmazonS3Client( new BasicAWSCredentials( MY_ACCESS_KEY_ID, MY_SECRET_KEY ) );
		s3Client.createBucket( MY_PICTURE_BUCKET );
		PutObjectRequest por = new PutObjectRequest( Constants.getPictureBucket(), Constants.PICTURE_NAME, new java.io.File( filePath) );  
		s3Client.putObject( por );
		
		ResponseHeaderOverrides override = new ResponseHeaderOverrides();
		override.setContentType( "image/jpeg" );
		
		GeneratePresignedUrlRequest urlRequest = new GeneratePresignedUrlRequest( Constants.getPictureBucket(), Constants.PICTURE_NAME );
		urlRequest.setExpiration( new Date( System.currentTimeMillis() + 3600000 ) );  // Added an hour's worth of milliseconds to the current time.
		urlRequest.setResponseHeaders( override );
		
		URL url = s3Client.generatePresignedUrl( urlRequest );
	}
	
	 @Override
	    public boolean onKeyDown(int keyCode, KeyEvent event)  {
	        if (keyCode == KeyEvent.KEYCODE_BACK ) {
	            // do something on back.
	        	//DatabaseHandler db = new DatabaseHandler(getApplicationContext());
	        	Intent rooms = new Intent(getApplicationContext(), RoomsActivity.class);
	        	//HashMap<String, String> loginInfo = db.getUserDetails();
	        	rooms.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
	        	rooms.putExtra("id",propID);
	        	rooms.putExtra("addr", addr);
	            startActivity(rooms);
	            return true;
	        }

	        return super.onKeyDown(keyCode, event);
	    }
	
	@Override
    public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.edit_room);
		
		s3Client.setRegion(Region.getRegion(Regions.US_WEST_2));
		
		
		// may need to account for newly registered user here
		Intent intent = getIntent();
		// pull info from previous page
		username = intent.getStringExtra("user");
		roomName = intent.getStringExtra("name");
		propID = intent.getStringExtra("propID");
		addr = intent.getStringExtra("addr");
		inputName = (EditText) findViewById(R.id.nameRoom);
		inputName.setText(roomName);
		dbID = intent.getStringExtra("id");
		roomURL = intent.getStringExtra("url");
		
		btnChangeName = (Button) findViewById(R.id.btnUpdateR);
		btnTakePhoto = (Button) findViewById(R.id.btnPhoto);
		btnAddConnection = (Button) findViewById(R.id.btnConnection);
		btnViewRoom = (Button) findViewById(R.id.btnView);
		btnDelete = (Button) findViewById(R.id.btnDelete);
		roomImage =(ImageView) findViewById(R.id.PhotoCaptured);
		
		if(roomURL != null){
			
		}
    	
        btnChangeName.setOnClickListener(new View.OnClickListener() 
		{

			@Override
			public void onClick(View arg0) {
				// change room name in database
				UserFunctions userFunction = new UserFunctions();
				String newName = inputName.getText().toString();
				userFunction.renameRoom(dbID,newName);

			}
			 
		 });
       
        btnTakePhoto.setOnClickListener(new View.OnClickListener() 
		{

			@Override
			public void onClick(View arg0) {
				getPano();
				
			}
			 
		 });
        
        btnAddConnection.setOnClickListener(new View.OnClickListener() 
		{

			@Override
			public void onClick(View arg0) {
				// go to screen to add connections to room
				
			}
			 
		 });
        
        btnViewRoom.setOnClickListener(new View.OnClickListener() 
		{

			@Override
			public void onClick(View arg0) {
				// view room as it is now
				
			}
			 
		 });
        
        btnDelete.setOnClickListener(new View.OnClickListener() 
		{

			@Override
			public void onClick(View arg0) {
				// view room as it is now
				//boolean cont = confirm();
				if(true)//cont)
				{
					//userFunctions.deleteProperty(dbID);
	                Intent rooms = new Intent(getApplicationContext(), RoomsActivity.class);
	                rooms.putExtra("name",username);
	                rooms.putExtra("id",propID);
		        	rooms.putExtra("addr", addr);
	                
	                startActivity(rooms);
				}
				
			}
			 
		 });
		
		 
	}
	//AMAZON S3 STUFF HERE *********************************************************************************************************
	private class S3PutObjectTask extends AsyncTask<Uri, Void, S3TaskResult> {

		ProgressDialog dialog;

		protected void onPreExecute() {
			dialog = new ProgressDialog(EditActivity.this);
			dialog.setMessage("Uploading");
			dialog.setCancelable(false);
			dialog.show();
		}

		protected S3TaskResult doInBackground(Uri... uris) {

			if (uris == null || uris.length != 1) {
				return null;
			}

			// The file location of the image selected.
			Uri selectedImage = uris[0];


            ContentResolver resolver = getContentResolver();
            String fileSizeColumn[] = {OpenableColumns.SIZE}; 
            
			Cursor cursor = resolver.query(selectedImage,
                    fileSizeColumn, null, null, null);

            cursor.moveToFirst();

            int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
            // If the size is unknown, the value stored is null.  But since an int can't be
            // null in java, the behavior is implementation-specific, which is just a fancy
            // term for "unpredictable".  So as a rule, check if it's null before assigning
            // to an int.  This will happen often:  The storage API allows for remote
            // files, whose size might not be locally known.
            String size = null;
            if (!cursor.isNull(sizeIndex)) {
                // Technically the column stores an int, but cursor.getString will do the
                // conversion automatically.
                size = cursor.getString(sizeIndex);
            } 
            
			cursor.close();

			ObjectMetadata metadata = new ObjectMetadata();
			metadata.setContentType(resolver.getType(selectedImage));
			if(size != null){
			    metadata.setContentLength(Long.parseLong(size));
			}

			S3TaskResult result = new S3TaskResult();

			// Put the image data into S3.
			try {
				s3Client.createBucket(Constants.getPictureBucket());

				PutObjectRequest por = new PutObjectRequest(
						Constants.getPictureBucket(), Constants.PICTURE_NAME,
						resolver.openInputStream(selectedImage),metadata);
				s3Client.putObject(por);
			} catch (Exception exception) {

				result.setErrorMessage(exception.getMessage());
			}

			return result;
		}

		protected void onPostExecute(S3TaskResult result) {

			dialog.dismiss();

			if (result.getErrorMessage() != null) {

				displayErrorAlert(
						S3UploaderActivity.this
								.getString(R.string.upload_failure_title),
						result.getErrorMessage());
			}
		}
	}

	private class S3GeneratePresignedUrlTask extends
			AsyncTask<Void, Void, S3TaskResult> {

		protected S3TaskResult doInBackground(Void... voids) {

			S3TaskResult result = new S3TaskResult();

			try {
				// Ensure that the image will be treated as such.
				ResponseHeaderOverrides override = new ResponseHeaderOverrides();
				override.setContentType("image/jpeg");

				// Generate the presigned URL.

				// Added an hour's worth of milliseconds to the current time.
				Date expirationDate = new Date(
						System.currentTimeMillis() + 3600000);
				GeneratePresignedUrlRequest urlRequest = new GeneratePresignedUrlRequest(
						Constants.getPictureBucket(), Constants.PICTURE_NAME);
				urlRequest.setExpiration(expirationDate);
				urlRequest.setResponseHeaders(override);

				URL url = s3Client.generatePresignedUrl(urlRequest);

				result.setUri(Uri.parse(url.toURI().toString()));

			} catch (Exception exception) {

				result.setErrorMessage(exception.getMessage());
			}

			return result;
		}

		protected void onPostExecute(S3TaskResult result) {

			if (result.getErrorMessage() != null) {

				displayErrorAlert(
						S3UploaderActivity.this
								.getString(R.string.browser_failure_title),
						result.getErrorMessage());
			} else if (result.getUri() != null) {

				// Display in Browser.
				startActivity(new Intent(Intent.ACTION_VIEW, result.getUri()));
			}
		}
	}

	private class S3TaskResult {
		String errorMessage = null;
		Uri uri = null;

		public String getErrorMessage() {
			return errorMessage;
		}

		public void setErrorMessage(String errorMessage) {
			this.errorMessage = errorMessage;
		}

		public Uri getUri() {
			return uri;
		}

		public void setUri(Uri uri) {
			this.uri = uri;
		}
	}
}

